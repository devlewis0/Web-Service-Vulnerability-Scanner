import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import requests
import threading

# Lista de URLs sensibles comunes para verificar
COMMON_URLS = [
    '/admin', '/login', '/register', '/config', '/.git', '/.env', '/backup', '/phpinfo.php'
]


def scan_vulnerabilities(url, callback):
    results = []
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url
    for path in COMMON_URLS:
        full_url = url.rstrip('/') + path
        try:
            response = requests.get(full_url)
            results.append({
                'url': full_url,
                'status_code': response.status_code,
                'reason': response.reason
            })
        except requests.RequestException as e:
            results.append({
                'url': full_url,
                'error': str(e)
            })
    callback(results)


class VulnerabilityScannerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Web Service Vulnerability Scanner")
        self.geometry("800x600")

        self.url_label = tk.Label(self, text="Enter URL to scan:")
        self.url_label.pack(pady=10)

        self.url_entry = tk.Entry(self, width=50)
        self.url_entry.pack(pady=10)

        self.scan_button = tk.Button(self, text="Scan", command=self.start_scan)
        self.scan_button.pack(pady=10)

        self.progress = ttk.Progressbar(self, mode='indeterminate')
        self.progress.pack(pady=10)

        self.results_text = scrolledtext.ScrolledText(self, wrap=tk.WORD, width=100, height=20)
        self.results_text.pack(pady=20)

        self.download_button = tk.Button(self, text="Download Report", command=self.download_report, state=tk.DISABLED)
        self.download_button.pack(pady=10)

    def start_scan(self):
        url = self.url_entry.get()
        if not url:
            messagebox.showerror("Error", "Please enter a URL.")
            return

        self.results_text.delete('1.0', tk.END)
        self.results_text.insert(tk.END, f"Scanning {url}...\n\n")

        self.progress.start()  # Start the animation
        self.download_button.config(state=tk.DISABLED)  # Disable the download button during scanning

        # Run the scan in a separate thread to avoid blocking the GUI
        threading.Thread(target=scan_vulnerabilities, args=(url, self.display_results)).start()

    def display_results(self, results):
        self.progress.stop()  # Stop the animation
        report_content = []
        for result in results:
            if 'error' in result:
                self.results_text.insert(tk.END, f"URL: {result['url']}\nError: {result['error']}\n\n")
                report_content.append(f"URL: {result['url']}\nError: {result['error']}\n\n")
            else:
                self.results_text.insert(tk.END,
                                         f"URL: {result['url']}\nStatus Code: {result['status_code']}\nReason: {result['reason']}\n\n")
                report_content.append(
                    f"URL: {result['url']}\nStatus Code: {result['status_code']}\nReason: {result['reason']}\n\n")
        self.report_content = "\n".join(report_content)
        self.download_button.config(state=tk.NORMAL)  # Enable the download button after scanning

    def download_report(self):
        if hasattr(self, 'report_content') and self.report_content:
            file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                     filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
            if file_path:
                with open(file_path, 'w') as file:
                    file.write(self.report_content)
                messagebox.showinfo("Success", "Report downloaded successfully.")


if __name__ == "__main__":
    app = VulnerabilityScannerApp()
    app.mainloop()
